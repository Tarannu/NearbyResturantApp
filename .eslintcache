[{"C:\\Users\\taran\\rest\\src\\index.js":"1","C:\\Users\\taran\\rest\\src\\reportWebVitals.js":"2","C:\\Users\\taran\\rest\\src\\App.js":"3","C:\\Users\\taran\\rest\\src\\containers\\Home\\Home.js":"4","C:\\Users\\taran\\rest\\src\\containers\\Search\\Search.js":"5","C:\\Users\\taran\\rest\\src\\api\\zomato.js":"6","C:\\Users\\taran\\rest\\src\\Components\\About\\About.js":"7","C:\\Users\\taran\\rest\\src\\Components\\Footer\\Footer.js":"8","C:\\Users\\taran\\rest\\src\\Components\\Login\\Login.js":"9","C:\\Users\\taran\\rest\\src\\axios.js":"10","C:\\Users\\taran\\rest\\src\\Components\\Button\\Button.js":"11","C:\\Users\\taran\\rest\\src\\Components\\Input\\Input.js":"12","C:\\Users\\taran\\rest\\src\\Components\\Nav\\Nav.js":"13","C:\\Users\\taran\\rest\\src\\Components\\Register\\Register.js":"14","C:\\Users\\taran\\rest\\src\\Components\\ResDetails\\ResDetails.js":"15","C:\\Users\\taran\\rest\\src\\Components\\Restaurant\\Restaurant.js":"16","C:\\Users\\taran\\rest\\src\\Components\\SearchBar\\SearchBar.js":"17","C:\\Users\\taran\\rest\\src\\Components\\Spinner\\Spinner.js":"18"},{"size":626,"mtime":1611878379080,"results":"19","hashOfConfig":"20"},{"size":375,"mtime":1611878379082,"results":"21","hashOfConfig":"20"},{"size":984,"mtime":1611975869078,"results":"22","hashOfConfig":"20"},{"size":457,"mtime":1611879141536,"results":"23","hashOfConfig":"20"},{"size":3227,"mtime":1611879337013,"results":"24","hashOfConfig":"20"},{"size":228,"mtime":1611878524716,"results":"25","hashOfConfig":"20"},{"size":406,"mtime":1611878379024,"results":"26","hashOfConfig":"20"},{"size":1459,"mtime":1611878379031,"results":"27","hashOfConfig":"20"},{"size":8211,"mtime":1611974769965,"results":"28","hashOfConfig":"20"},{"size":167,"mtime":1611878379070,"results":"29","hashOfConfig":"20"},{"size":267,"mtime":1611878379028,"results":"30","hashOfConfig":"20"},{"size":1777,"mtime":1611878379035,"results":"31","hashOfConfig":"20"},{"size":520,"mtime":1611878379042,"results":"32","hashOfConfig":"20"},{"size":8102,"mtime":1611879669986,"results":"33","hashOfConfig":"20"},{"size":1528,"mtime":1611878379048,"results":"34","hashOfConfig":"20"},{"size":2753,"mtime":1611878379051,"results":"35","hashOfConfig":"20"},{"size":883,"mtime":1611878379055,"results":"36","hashOfConfig":"20"},{"size":178,"mtime":1611878379058,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1t6c6sk",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\taran\\rest\\src\\index.js",[],["79","80"],"C:\\Users\\taran\\rest\\src\\reportWebVitals.js",[],"C:\\Users\\taran\\rest\\src\\App.js",[],"C:\\Users\\taran\\rest\\src\\containers\\Home\\Home.js",[],"C:\\Users\\taran\\rest\\src\\containers\\Search\\Search.js",["81","82","83","84","85","86","87"],"import React, { useState, useEffect } from \"react\";\r\nimport SearchBar from \"../../Components/SearchBar/SearchBar\";\r\nimport Restaurant from \"../../Components/Restaurant/Restaurant\";\r\nimport zomato from \"../../api/zomato\";\r\nimport Select from \"react-select\";\r\nimport './Search.css';\r\n\r\nconst Search = () => {\r\n  const [food, setFood] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const options = [{ label: \"---None---\", value: \"\" }, { label: \"Sort by review\", value: \"by review\" }];\r\n  const [sortBy, setSortBy] = useState(\"\");\r\n\r\n  const handleLocationChange = (e) => {\r\n    setLocation(e.target.value);\r\n  };\r\n  const handleFoodChange = (e) => {\r\n    setFood(e.target.value);\r\n  };\r\n  const handleSortChange = (e) => {\r\n    setSortBy(e.target.value);\r\n  };\r\n\r\n  const searchFunc = async (loc, fd, sort) => {\r\n    try {\r\n      //location key is extracted from this api\r\n      const city_response = await zomato.get(`/locations?query=${loc}`);\r\n      const city_id = JSON.stringify(\r\n        city_response.data.location_suggestions[0].entity_id\r\n      );\r\n\r\n      //sort logic will be here\r\n      var getURL = \"\";\r\n      if (sortBy == \"by review\") {\r\n        getURL = `/search?entity_id=${city_id}&entity_type=city&q=${fd}&sort=rating&order=desc`;\r\n      } else getURL = `/search?entity_id=${city_id}&entity_type=city&q=${fd}`;\r\n      //this api get the food type\r\n      const food_response = await zomato.get(getURL);\r\n      \r\n      const items = food_response.data.restaurants;\r\n      if (items.length) {\r\n        setResults(items);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    searchFunc(location, food, sortBy);\r\n  }, [location, food, sortBy]);\r\n  \r\n  const handleSubmit = (e) => {\r\n    console.log(\"It will take max 15 minutes to load otherwise please refresh\");\r\n    e.preventDefault();\r\n    searchFunc(location, food, sortBy);\r\n  };\r\n  const handleSearchButton = (e) => {};\r\n  const handleSelect = (element) => {\r\n    console.log(element.value);\r\n    setSortBy(element.value);\r\n    searchFunc(food, location, sortBy);\r\n  };\r\n  let restaurants = null;\r\n  if(results.length > 0){\r\n    restaurants = results.map(restaurant => {\r\n      return (\r\n        <Restaurant\r\n          key={restaurant.restaurant.id}\r\n          restaurant={restaurant.restaurant}\r\n       />\r\n      )\r\n    });\r\n\r\n  }\r\n\r\n  const handleSort = (value) => {\r\n    setSortBy(value);\r\n    console.log(sortBy);\r\n    searchFunc(food,location,sortBy);\r\n  };\r\n \r\n\r\n  return (\r\n    <div style={{ padding: 50 }}>\r\n      <SearchBar\r\n        location={location}\r\n        onLocationChange={handleLocationChange}\r\n        onFoodChange={handleFoodChange}\r\n        handleSearchButton={handleSearchButton}\r\n      />\r\n      <div>\r\n        <select \r\n          className=\"SortBy\"\r\n        >\r\n          {options.map(option =>{\r\n            return <option {...option}></option>\r\n          })}\r\n        </select>\r\n      </div>\r\n       {results.length > 0 ? <p className=\"SearchResults\">Search Results</p> : null}\r\n       {/* {restaurants} */}\r\n       <Restaurant results={results} onSortChanged={handleSort}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;","C:\\Users\\taran\\rest\\src\\api\\zomato.js",[],"C:\\Users\\taran\\rest\\src\\Components\\About\\About.js",[],"C:\\Users\\taran\\rest\\src\\Components\\Footer\\Footer.js",[],"C:\\Users\\taran\\rest\\src\\Components\\Login\\Login.js",["88","89","90"],"import React, {useState} from 'react';\r\nimport Input from '../../Components/Input/Input';\r\nimport Button from '../../Components/Button/Button';\r\nimport Spinner from '../../Components/Spinner/Spinner';\r\nimport axios from '../../axios';\r\nimport './Login.css';\r\n\r\nconst Login = (props) => {\r\n\r\n    // useState hooks \r\n    const [formData, setFormData] = useState({\r\n        dataFields: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter email',\r\n                    label: 'Email',\r\n                },\r\n                value: '',\r\n                validationRules:{\r\n                    required: true,\r\n                    validString: true,\r\n                    mustHaveBeenRegistered: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Enter password',\r\n                    label: 'Password',\r\n                },\r\n                value: '',\r\n                validationRules: {\r\n                    required: true,\r\n                    mustMatch: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            }\r\n        },\r\n        validDataEntered: false,\r\n    });\r\n    const [validationError, setValidationError] = useState('');\r\n    const [authenticated, setAuthenticated] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    // Hackerrank api problem solved.\r\n    const getTotalGoals = async (year, team) => {\r\n        const BaseURL = 'https://jsonmock.hackerrank.com/api/football_matches';\r\n        const resJson = await fetch(`${BaseURL}?year=${year}&team1=${team}`);\r\n        const res = await resJson.json();\r\n        // console.log(res.total_pages);\r\n        let totalGoals = 0;\r\n        for(let i=1;i<=res.total_pages;i++){\r\n            const responseJson = await fetch(`${BaseURL}?year=${year}&team1=${team}&page=${i}`);\r\n            const response = await responseJson.json();\r\n            for(let j=0;j<response.data.length;j++){\r\n                // console.log(parseInt(response.data[j]['team1goals']));\r\n                totalGoals += parseInt(response.data[j]['team1goals']);\r\n            }\r\n        }\r\n        \r\n        for(let i=1;i<=res.total_pages;i++){\r\n            const responseJson = await fetch(`${BaseURL}?year=${year}&team2=${team}&page=${i}`);\r\n            const response = await responseJson.json();\r\n            for(let j=0;j<response.data.length;j++){\r\n                // console.log(parseInt(response.data[j]['team1goals']));\r\n                totalGoals += parseInt(response.data[j]['team2goals']);\r\n            }\r\n        }\r\n\r\n        // const Http = new XMLHttpRequest();\r\n        // const url = `${BaseURL}?year=${year}&team1=${team}&page=1`;\r\n        // Http.open(\"GET\", url);\r\n        // Http.send();\r\n        // Http.onreadystatechange = (e) => {\r\n        //     console.log(Http.response);\r\n        // }\r\n    }\r\n\r\n    // validate the input\r\n    const validated = ( value, rules ) => {\r\n        let isValid = true;\r\n        if(rules && rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.validString){\r\n            const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,3}))$/;\r\n            isValid = re.test(String(value).toLowerCase());\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    const continueAsGuest = () => {\r\n        props.history.push('/search-and-result')\r\n    }\r\n\r\n    // handle input\r\n    const inputChangeHandler = (event, inputIdentifier) => {\r\n        const updatedDataFields = {...formData.dataFields};\r\n        const updatedField= {...updatedDataFields[inputIdentifier]};\r\n        updatedField.value = event.target.value;\r\n\r\n        updatedField.valid = validated(updatedField.value, updatedField.validationRules);\r\n        updatedField.touched = true;\r\n        updatedDataFields[inputIdentifier] = updatedField;\r\n\r\n        let formDataIsValid = true;\r\n        for(let inputIdentifier in updatedDataFields){\r\n            formDataIsValid = updatedDataFields[inputIdentifier].valid && formDataIsValid;\r\n        }\r\n        setFormData({dataFields: updatedDataFields, validDataEntered: formDataIsValid});\r\n    }\r\n\r\n    // handle Login button click\r\n    const loginButtonHandler = async (event) => {\r\n        event.preventDefault();\r\n        if(formData.dataFields.email.value === \"\" && formData.dataFields.password.value === \"\"){\r\n            setValidationError(\"Please, enter username/passoword to log in.\");\r\n        } else{\r\n            if(formData.validDataEntered){\r\n                setLoading(true);\r\n                //const userJson = await fetch(`https://restaurant-app-users-default-rtdb.firebaseio.com/users.json`);\r\n                //const user = await userJson.json();\r\n                const users = await axios.get(`/users.json`);\r\n                const userArray = [];\r\n                for(let key in users.data){\r\n                    userArray.push([users.data[key]]);\r\n                }\r\n                let validUser = false;\r\n                for(let i=0;i<userArray.length;i++){\r\n                    if((userArray[i][0].username === formData.dataFields.email.value) && \r\n                        (userArray[i][0].password === formData.dataFields.password.value)){\r\n                            validUser = true;\r\n                        }\r\n                }\r\n                \r\n                if(validUser){\r\n                    setAuthenticated(true);\r\n                    props.history.push('/search-and-result')\r\n                } else {\r\n                    setValidationError(\"Email/password was wrong.\");\r\n                    setLoading(false);;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // This is for the api problem on Hackerrank\r\n        //getTotalGoals(2011, 'Ac Milan');\r\n\r\n    }\r\n\r\n    // handler Register button click\r\n    const registerClickHandler = () => {\r\n        console.log('inside register component')\r\n        props.history.push('/register');\r\n    };\r\n\r\n    const dataFieldsArray = [];\r\n    for(let key in formData.dataFields){\r\n        dataFieldsArray.push({\r\n            id: key,\r\n            config: formData.dataFields[key]\r\n        });\r\n    }\r\n\r\n\r\n    let form =  ( \r\n        <form className=\"Form\" onSubmit = {(event) => loginButtonHandler(event)}>\r\n            {dataFieldsArray.map(formElement => {\r\n                return(\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        touched={formElement.config.touched}\r\n                        valueType={formElement.id}\r\n                        changed={(event) => inputChangeHandler(event, formElement.id)}\r\n                    />\r\n                )\r\n            })}\r\n            <Button>Login</Button>\r\n            <p className=\"LoginValidationError\">{validationError}</p>\r\n        </form>\r\n    )\r\n    \r\n    // return statement\r\n    return (\r\n        <>\r\n        {loading ? <Spinner /> : (\r\n            <>\r\n                <div className=\"Login\">\r\n                    <p className=\"LoginText\">Login</p>\r\n                    {form}\r\n                    <div className=\"NotRegistered\">\r\n                        <p>Not Registered Yet?</p>\r\n                        <p \r\n                            className=\"RegisterText\"\r\n                            onClick={registerClickHandler}>Register</p>\r\n                    </div>\r\n                </div>\r\n                <p \r\n                    className=\"Guest\" \r\n                    onClick={continueAsGuest}>Continue as guest\r\n                </p>\r\n            </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","C:\\Users\\taran\\rest\\src\\axios.js",[],"C:\\Users\\taran\\rest\\src\\Components\\Button\\Button.js",[],"C:\\Users\\taran\\rest\\src\\Components\\Input\\Input.js",[],"C:\\Users\\taran\\rest\\src\\Components\\Nav\\Nav.js",[],"C:\\Users\\taran\\rest\\src\\Components\\Register\\Register.js",["91","92","93"],"import React, {useEffect, useState} from 'react';\r\nimport Input from '../../Components/Input/Input';\r\nimport Button from '../Button/Button';\r\nimport Spinner from '../../Components/Spinner/Spinner';\r\nimport axios from '../../axios';\r\nimport './Register.css';\r\n\r\nconst Register = (props) => {\r\n    const [formData, setFormData] = useState({\r\n        dataFields: {\r\n            firstName: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your first name',\r\n                    label: 'First Name'\r\n                },\r\n                value: '',\r\n                validationRules: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            },\r\n            lastName: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your last name',\r\n                    label: 'Last Name'\r\n                },\r\n                value: '',\r\n                validationRules: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter email',\r\n                    label: 'Email',\r\n                },\r\n                value: '',\r\n                validationRules:{\r\n                    required: true,\r\n                    validString: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Enter password',\r\n                    label: 'Password',\r\n                },\r\n                value: '',\r\n                secretValue: '',\r\n                validationRules: {\r\n                    required: true,\r\n                    minLength: 8,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            },\r\n            confirmPassword: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Re-enter password',\r\n                    label: 'Confirm Password',\r\n                },\r\n                value: '',\r\n                secretValue: '',\r\n                validationRules: {\r\n                    required: true,\r\n                    mustMatch: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            },\r\n        },\r\n        isFormValid: false,\r\n    });\r\n    const[validationError, setValidationError] = useState(''); \r\n    const [authenticated, setAuthenticated] = useState(false);\r\n    const [userAlreadyExists, setUserAlreadyExists] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // using useEffect hook to register users to the database\r\n\r\n    // validate the input\r\n    const validated = ( value, rules ) => {\r\n        let isValid = true;\r\n        if(rules && rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.validString){\r\n            const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,3}))$/;\r\n            isValid = re.test(String(value).toLowerCase());\r\n        }\r\n\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength;\r\n        }\r\n\r\n        if(rules.mustMatch){\r\n            isValid = value === formData.dataFields.password.value;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    // handle signUp button\r\n    const signUpButtonHandler = async (event) => {\r\n        setValidationError('');\r\n        const user = {\r\n            username: formData.dataFields.email.value,\r\n            password: formData.dataFields.password.value,\r\n            firstName: formData.dataFields.firstName.value,\r\n            lastName: formData.dataFields.lastName.value,\r\n            email: formData.dataFields.email.value,\r\n        }\r\n\r\n        // either sign user up or generate error message\r\n        if(formData.isFormValid){\r\n            setLoading(true);\r\n            axios.get(`/users.json`)\r\n                .then(response => {\r\n                    let alreadySignedUp = false;\r\n                    for(let key in response.data){\r\n                        if(response.data[key].username === user.username){\r\n                            alreadySignedUp = true;\r\n                        }\r\n                    }\r\n                    if(alreadySignedUp === false){\r\n                        axios.post('/users.json', user)\r\n                        .then(response => {\r\n                            props.history.push('/search-and-result');\r\n                        });\r\n                    } else{\r\n                        setUserAlreadyExists(true);\r\n                        setLoading(false);\r\n                        setValidationError('User already exists. Cannot register.');\r\n                    }\r\n                })\r\n        } else{\r\n            setValidationError('Please, complete the form to sign up.');\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    // handle input\r\n    const inputChangeHandler = (event, field) => {\r\n        const updatedDataFields = {...formData.dataFields};\r\n        const updatedField = {...updatedDataFields[field]};\r\n        updatedField.value = event.target.value;\r\n\r\n        // validate entered values\r\n        updatedField.valid = validated(updatedField.value, updatedField.validationRules);\r\n        updatedField.touched = true;\r\n        updatedDataFields[field] = updatedField;\r\n\r\n        let formDataIsValid = true;\r\n        for(let field in updatedDataFields){\r\n            formDataIsValid = updatedDataFields[field].valid && formDataIsValid;\r\n        }\r\n        setFormData({dataFields: updatedDataFields, isFormValid: formDataIsValid});\r\n    }\r\n\r\n    const redirectToLoginPage = () => {\r\n        props.history.goBack();\r\n    }\r\n\r\n\r\n    const dataFieldsArray = [];\r\n    for(let key in formData.dataFields){\r\n        dataFieldsArray.push({\r\n            id: key,\r\n            config: formData.dataFields[key],\r\n        });\r\n    }\r\n\r\n    let form = \r\n        <form onSubmit={(event)=>signUpButtonHandler(event)}>\r\n            {dataFieldsArray.map(formElement => {\r\n                return(\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        touched={formElement.config.touched}\r\n                        valueType={formElement.id.includes('Name') ? (formElement.id.substring(0, formElement.id.length-4) + ' ' +  formElement.id.substring(formElement.id.length-4).toLowerCase()) : formElement.id}\r\n                        changed={(event) => inputChangeHandler(event, formElement.id)}\r\n                    />\r\n                )\r\n            })}\r\n            <Button>Sign Up</Button>\r\n        </form>\r\n    return (\r\n        <div>\r\n            {loading ? <Spinner/> : (\r\n                <div className=\"Register\">\r\n                    <p className=\"RegisterTitle\">Register for more actions and easy checkouts</p>\r\n                    <div className=\"RegisterPage\">\r\n                        {form}\r\n                        <p className=\"ValidationError\">{validationError}</p>\r\n                        {userAlreadyExists ? <div><p>Want to log in?</p><Button clicked={redirectToLoginPage}>Login</Button></div>: null}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Register;","C:\\Users\\taran\\rest\\src\\Components\\ResDetails\\ResDetails.js",["94"],"import React,{useState,useEffect}  from 'react';\r\nimport './ResDetails.css';\r\nimport zomato from '../../api/zomato'\r\n\r\nconst ResDetails = ({match}) => {\r\n    const [results, setResults] = useState([]);\r\n  \r\n  const detailsFunc = async () => {\r\n    try {\r\n      //location key is extracted from this api\r\n      const res = await zomato.get(`/restaurant?res_id=${match.params.id}`);\r\n      const details = res.data;\r\n      console.log(\"Detail IS :  \", details);\r\n      if (details) {\r\n        setResults(details);\r\n      }\r\n      const menu = await zomato.get(`/dailymenu?res_id=$16931323`);\r\n      const menuDetails = menu.data;\r\n      console.log(\"Menu IS :  \", menuDetails);\r\n      if (menuDetails) {\r\n        setResults(menuDetails);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    detailsFunc();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"res-div\">\r\n        <h2>{results.name}</h2>\r\n        <div className=\"res-details\">\r\n        <p>They serve cuisines {results.cuisines}</p>\r\n        <p >\r\n          Open Through {results.timings}\r\n        </p>\r\n        <p>Located at</p>\r\n        <p>Contact {results.phone_numbers} </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"order-selection\">\r\n        <h2>Their daily menu is given for you to select for order</h2>\r\n        <ul>\r\n          <li>Cheese Burger</li>\r\n          <li>Ham Burger</li>\r\n        </ul>\r\n        <button>Place Order</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResDetails;","C:\\Users\\taran\\rest\\src\\Components\\Restaurant\\Restaurant.js",[],"C:\\Users\\taran\\rest\\src\\Components\\SearchBar\\SearchBar.js",[],"C:\\Users\\taran\\rest\\src\\Components\\Spinner\\Spinner.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":14},{"ruleId":"99","severity":1,"message":"103","line":21,"column":9,"nodeType":"101","messageId":"102","endLine":21,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":35,"column":18,"nodeType":"106","messageId":"107","endLine":35,"endColumn":20},{"ruleId":"108","severity":1,"message":"109","line":52,"column":6,"nodeType":"110","endLine":52,"endColumn":30,"suggestions":"111"},{"ruleId":"99","severity":1,"message":"112","line":54,"column":9,"nodeType":"101","messageId":"102","endLine":54,"endColumn":21},{"ruleId":"99","severity":1,"message":"113","line":60,"column":9,"nodeType":"101","messageId":"102","endLine":60,"endColumn":21},{"ruleId":"99","severity":1,"message":"114","line":67,"column":5,"nodeType":"101","messageId":"102","endLine":67,"endColumn":16},{"ruleId":"99","severity":1,"message":"115","line":48,"column":12,"nodeType":"101","messageId":"102","endLine":48,"endColumn":25},{"ruleId":"99","severity":1,"message":"116","line":51,"column":11,"nodeType":"101","messageId":"102","endLine":51,"endColumn":24},{"ruleId":"99","severity":1,"message":"117","line":71,"column":17,"nodeType":"101","messageId":"102","endLine":71,"endColumn":27},{"ruleId":"99","severity":1,"message":"118","line":1,"column":16,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"115","line":90,"column":12,"nodeType":"101","messageId":"102","endLine":90,"endColumn":25},{"ruleId":"99","severity":1,"message":"119","line":90,"column":27,"nodeType":"101","messageId":"102","endLine":90,"endColumn":43},{"ruleId":"108","severity":1,"message":"120","line":29,"column":6,"nodeType":"110","endLine":29,"endColumn":8,"suggestions":"121"},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'handleSortChange' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchFunc'. Either include it or remove the dependency array.","ArrayExpression",["124"],"'handleSubmit' is assigned a value but never used.","'handleSelect' is assigned a value but never used.","'restaurants' is assigned a value but never used.","'authenticated' is assigned a value but never used.","'getTotalGoals' is assigned a value but never used.","'totalGoals' is assigned a value but never used.","'useEffect' is defined but never used.","'setAuthenticated' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailsFunc'. Either include it or remove the dependency array.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [location, food, sortBy, searchFunc]",{"range":"130","text":"131"},"Update the dependencies array to be: [detailsFunc]",{"range":"132","text":"133"},[1742,1766],"[location, food, sortBy, searchFunc]",[851,853],"[detailsFunc]"]